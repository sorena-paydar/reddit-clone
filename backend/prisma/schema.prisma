// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  Male
  Female
  Other
  Unknown
}

model User {
  id            String      @id @unique @default(uuid())
  email         String      @unique
  username      String      @unique
  password      String
  displayName   String?     @map("display_name") @db.VarChar(30)
  bio           String?     @db.VarChar(200)
  gender        Gender      @default(Unknown)
  avatar        String?
  emailVerified Boolean     @default(false) @map("email_verified")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  Subreddit     Subreddit[]
  Members       Member[]
  Post          Post[]

  @@map("users")
}

model Subreddit {
  id          String   @id @unique @default(uuid())
  name        String   @unique @db.VarChar(30)
  description String?  @db.VarChar(400)
  avatar      String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @map("user_id")
  Members     Member[]
  Post        Post[]

  @@map("subreddits")
}

model Member {
  id          String    @id @unique @default(uuid())
  subreddit   Subreddit @relation(fields: [subredditId], references: [id], onDelete: Cascade)
  subredditId String    @map("subreddit_id")
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @map("user_id")

  @@map("members")
}

model Post {
  id          String    @id @unique @default(uuid())
  title       String
  content     String?   @db.VarChar(3000)
  slug        String    @unique
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @map("user_id")
  subreddit   Subreddit @relation(fields: [subredditId], references: [id], onDelete: Cascade)
  subredditId String    @map("subreddit_id")
  Media       Media[]

  @@map("posts")
}

model Media {
  id        String   @id @unique @default(uuid())
  mediaUrl  String   @map("media_url")
  createdAt DateTime @default(now()) @map("created_at")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @map("post_id")

  @@map("medias")
}
